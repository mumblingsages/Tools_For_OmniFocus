----	Created by: Mark Parry--	Created on: 9/18/16----	Copyright (c) 2016 Mumblingsages.com--	All Rights Reserved--use AppleScript version "2.4" -- Yosemite (10.10) or lateruse scripting additionson run {}		set projectsPastReview to getOverdueProjects()	set newReviewDates to getNewReviewDates(projectsPastReview)	setNewReviewDates(projectsPastReview, newReviewDates)end runon getOverdueProjects()	local theOverdueProjects	local today	set today to (current date)		tell application "OmniFocus"		tell default document			set theOverdueProjects to every flattened project where its next review date is less than today		end tell	end tell	return theOverdueProjectsend getOverdueProjectson getNewReviewDates(projectsPastReview)		local newReviewDates	set newReviewDates to {}	repeat with projectPastReview in projectsPastReview		local newReviewDate		set newReviewDate to calculateNewReviewDate(projectPastReview)		set end of newReviewDates to newReviewDate	end repeat	return newReviewDatesend getNewReviewDateson calculateNewReviewDate(projectPastReview)		tell application "OmniFocus"		tell projectPastReview			set lastReview to last review date			set reviewInterval to its review interval			set newReviewDate to my playReviewDatesForward(lastReview, reviewInterval)			return newReviewDate		end tell	end tell	end calculateNewReviewDateon playReviewDatesForward(lastReview, reviewInterval)		if lastReview is greater than (current date) then		return lastReview	else		tell application "OmniFocus"			local reviewUnits			set reviewUnits to unit of reviewInterval			local reviewSteps			set reviewSteps to steps of reviewInterval									if reviewUnits is hour then				set lastReview to (lastReview + (reviewSteps) * 3600)			else if reviewUnits is day then				set lastReview to (lastReview + (reviewSteps) * 86400)			else if reviewUnits is week then				set lastReview to (lastReview + (reviewSteps) * 604800)			else if reviewUnits is month then				set lastReview to (lastReview + (reviewSteps) * 2419200) --This needs to be fixed up			else if reviewUnits is year then				set lastReview to (lastReview + (reviewSteps) * 29030400) --This needs to be fixed up			end if					end tell		return playReviewDatesForward(lastReview, reviewInterval)	end ifend playReviewDatesForwardon setNewReviewDates(projectsPastReview, newReviewDates)	repeat with n from 1 to length of projectsPastReview		tell application "OmniFocus"			local currentProject			set currentProject to item n of projectsPastReview			local newReviewDate			set newReviewDate to item n of newReviewDates			set last review date of currentProject to newReviewDate		end tell	end repeatend setNewReviewDates