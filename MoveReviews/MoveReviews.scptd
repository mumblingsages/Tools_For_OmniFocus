----	Created by: Mark Parry--	Created on: 9/18/16----	Copyright (c) 2016 Mumblingsages.com--	All Rights Reserved--use AppleScript version "2.4" -- Yosemite (10.10) or lateruse scripting additionsproperty DebugLib : load script alias ("Macintosh HD:Users:Mark:Developer:Repos:Git_Tutorial:debugging library:Debugging.scpt")on run {}	initializeScript()		set projectsPastReview to getOverdueProjects()	set newReviewDates to getNewReviewDates(projectsPastReview)	DebugLib's writeLogEntry("Stop")end runon initializeScript()	DebugLib's setDebug(true)end initializeScripton getOverdueProjects()	local theOverdueProjects	local today	set today to (current date)		tell application "OmniFocus"		tell default document			set theOverdueProjects to every flattened project where its next review date is less than today		end tell	end tell	return theOverdueProjectsend getOverdueProjectson getNewReviewDates(projectsPastReview)		local newReviewDates	set newReviewDates to {}	repeat with projectPastReview in projectsPastReview		local newReviewDate		set newReviewDate to calculateNewReviewDate(projectPastReview)		set end of newReviewDates to newReviewDate	end repeat	return newReviewDatesend getNewReviewDateson calculateNewReviewDate(projectPastReview)	tell application "OmniFocus"		tell projectPastReview			set lastReview to last review date			set reviewInterval to its review interval			set newReviewDate to my playReviewDatesForward(lastReview, reviewInterval)			DebugLib's writeLogEntry(newReviewDate)		end tell	end tell	end calculateNewReviewDateon playReviewDatesForward(lastReview, reviewInterval)		if lastReview is greater than (current date) then		return lastReview	else		tell application "OmniFocus"			local reviewUnits			set reviewUnits to unit of reviewInterval			local reviewSteps			set reviewSteps to steps of reviewInterval									if reviewUnits is hour then				set lastReview to (lastReview + (reviewSteps) * 3600)			else if reviewUnits is day then				set lastReview to (lastReview + (reviewSteps) * 86400)			else if reviewUnits is week then				set lastReview to (lastReview + (reviewSteps) * 604800)			else if reviewUnits is month then				set lastReview to (lastReview + (reviewSteps) * 604800)			else if reviewUnits is year then				tell lastReview					-- set ly to year of lastReview					end tell				local lastReviewYear							end if					end tell		return playReviewDatesForward(lastReview, reviewInterval)	end ifend playReviewDatesForwardon addMonths onto oldDate by m -- returns a date	copy oldDate to newDate	-- Convert the month-offset parameter to years and months	set {y, m} to {m div 12, m mod 12}	-- If the month offset is negative (-1 to -11), make it positive from a year previously	if m < 0 then set {y, m} to {y - 1, m + 12}	-- Add the year offset into the new date's year	set newDate's year to (newDate's year) + y	-- Add the odd months (at 32 days per month) and set the day	if m is not 0 then tell newDate to set {day, day} to {32 * m, day}	-- If the day's now wrong, it doesn't exist in the target month	-- Subtract the overflow into the following month to return to the last day of the target month	if newDate's day is not oldDate's day then set newDate to newDate - (newDate's day) * days	return newDateend addMonths